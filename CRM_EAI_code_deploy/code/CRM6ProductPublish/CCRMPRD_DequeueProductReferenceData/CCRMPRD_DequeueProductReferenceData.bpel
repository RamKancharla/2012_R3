<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sun Nov 09 20:43:23 GMT 2008
  Author:  rob.billington
  Purpose: Asynchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="CCRMPRD_DequeueProductReferenceData" targetNamespace="http://www.reuters.com/ns/2007/09/01/GCAP/CCRM/PRD/CCRMPRD_DequeueProductReferenceData" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:ns4="http://www.siebel.com/xml/Test%20Product" xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath" xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns5="http://www.siebel.com/xml/UDA%20Dynamic%20Matrix" xmlns:client="http://www.reuters.com/ns/2007/09/01/GCAP/CCRM/PRD/CCRMPRD_DequeueProductReferenceData" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath" xmlns:ns1="http://xmlns.oracle.com/pcbpel/adapter/mq/headerDequeue/" xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions" xmlns:ns3="http://www.reuters.com/ns/2007/09/01/GCAP/CCRM/PRD/CCRMPRD_ProductUpdateAssembler" xmlns:ns2="http://xmlns.oracle.com/pcbpel/adapter/opaque/" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue">
    <!-- Imported classes to support Base64Decoding -->
    <bpelx:exec import="java.util.*"/>
    <bpelx:exec import="java.lang.*"/>
    <bpelx:exec import="java.math.*"/>
    <bpelx:exec import="java.io.*"/>
    <bpelx:exec import="oracle.soa.common.util.Base64Decoder"/>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink myRole="Dequeue_role" name="Dequeue" partnerLinkType="ns1:Dequeue_plt"/>
        <partnerLink name="CCRMPRD_ProductUpdateAssembler" partnerRole="CCRMPRD_ProductUpdateAssemblerProvider" partnerLinkType="ns3:CCRMPRD_ProductUpdateAssembler"/>
    </partnerLinks>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="opaqueInputVariable" messageType="ns1:Dequeue_msg"/>
        <variable name="payloadType" type="xsd:string"/>
        <variable name="decodedInputVariable" type="xsd:string"/>
        <variable name="InvCCRMPRD_ProductUpdateAssembler_Configurations_processProductConfigurations_InputVariable" messageType="ns3:DynamicAttributesMessage"/>
        <variable name="InvCCRMPRD_ProductUpdateAssembler_Product_processProductDefinition_InputVariable" messageType="ns3:CCRMPRD_ProductUpdateAssemblerRequestMessage"/>
        <variable name="inputBase64Binary" type="xsd:base64Binary"/>
    </variables>
    <faultHandlers>
        <catchAll>
            <bpelx:exec name="setCustomTitleFault" language="java" version="1.3">
                <![CDATA[setCompositeInstanceTitle("Fault");]]>
            </bpelx:exec>
        </catchAll>
    </faultHandlers>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in CCRMPRD_DequeueProductReferenceData.wsdl) -->
        <receive name="receiveInput" partnerLink="Dequeue" portType="ns1:Dequeue_ptt" operation="Dequeue" variable="opaqueInputVariable" createInstance="yes"/>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <assign name="AsgInputToBase64String">
            <copy>
                <from variable="opaqueInputVariable" part="opaque" query="/ns2:opaqueElement"/>
                <to variable="inputBase64Binary"/>
            </copy>
        </assign>
        <bpelx:exec name="DecodeBase64InputToString" language="java" version="1.3">
            <![CDATA[String input = (String)getVariableData("inputBase64Binary");                             
Base64Decoder Decoder = new Base64Decoder();                            
     
setVariableData("payloadType","Unknown Payload");             
                            
try                                     
{        
String decodedAmpersand = Base64Decoder.decode(input).replaceAll("&", "&amp;");     
String decodedNamespace = decodedAmpersand.replaceAll("UDA Dynamic Matrix", "UDA%20Dynamic%20Matrix");  
decodedAmpersand = null;  
setVariableData("decodedInputVariable",decodedNamespace);      
                
String rootElementName = decodedNamespace.substring(                   
    decodedNamespace.lastIndexOf("<") + 2,                   
    decodedNamespace.lastIndexOf(">"));               
                   
if (null != rootElementName) {            
    setVariableData("payloadType",rootElementName);        
    System.out.println(rootElementName);       
    }            
                           
rootElementName = null;               
decodedNamespace = null;  
}                                     
catch(Exception e)                                     
{                                     
e.printStackTrace();                                      
}]]>
        </bpelx:exec>
        <assign name="AsgForDebuggingOnly">
            <copy>
                <from variable="decodedInputVariable"/>
                <to variable="decodedInputVariable"/>
            </copy>
        </assign>
        <switch name="Switch_1">
            <case condition="'PSPDynamicMatrix' = bpws:getVariableData('payloadType')">
                <bpelx:annotation>
                    <bpelx:pattern>PSPDynamicMatrix</bpelx:pattern>
                </bpelx:annotation>
                <sequence name="Sequence_2">
                    <assign name="AsgPSPDynamicMatrix">
                        <copy>
                            <from expression="ora:parseEscapedXML(bpws:getVariableData('decodedInputVariable'))"/>
                            <to variable="InvCCRMPRD_ProductUpdateAssembler_Configurations_processProductConfigurations_InputVariable" part="payload" query="/ns5:PSPDynamicMatrix"/>
                        </copy>
                    </assign>
                    <bpelx:exec name="setCustomTitlePSPDynamicMatrix" language="java" version="1.3">
                        <![CDATA[String prodIntegrationId = "null";         
         
if (null != ((oracle.xml.parser.v2.XMLElement) getVariableData("InvCCRMPRD_ProductUpdateAssembler_Configurations_processProductConfigurations_InputVariable","payload","/ns5:PSPDynamicMatrix/ns5:ProdIntegrationId")).getFirstChild() ) {         
    prodIntegrationId = ((oracle.xml.parser.v2.XMLElement) getVariableData("InvCCRMPRD_ProductUpdateAssembler_Configurations_processProductConfigurations_InputVariable","payload","/ns5:PSPDynamicMatrix/ns5:ProdIntegrationId")).getFirstChild().getNodeValue();         
}         
         
setCompositeInstanceTitle( getVariableData("payloadType") + " " + prodIntegrationId );]]>
                    </bpelx:exec>
                    <invoke name="InvCCRMPRD_ProductUpdateAssembler_Configurations" partnerLink="CCRMPRD_ProductUpdateAssembler" portType="ns3:CCRMPRD_ProductUpdateAssembler" operation="processProductConfigurations" inputVariable="InvCCRMPRD_ProductUpdateAssembler_Configurations_processProductConfigurations_InputVariable"/>
                </sequence>
            </case>
            <case condition="'Product' = bpws:getVariableData('payloadType')">
                <bpelx:annotation>
                    <bpelx:pattern>Product</bpelx:pattern>
                </bpelx:annotation>
                <sequence name="Sequence_1">
                    <assign name="AsgProduct">
                        <copy>
                            <from expression="ora:parseEscapedXML(bpws:getVariableData('decodedInputVariable'))"/>
                            <to variable="InvCCRMPRD_ProductUpdateAssembler_Product_processProductDefinition_InputVariable" part="payload" query="/ns4:Product"/>
                        </copy>
                    </assign>
                    <bpelx:exec name="setCustomTitleProduct" language="java" version="1.3">
                        <![CDATA[String productId = "null";   
   
if (null != ((oracle.xml.parser.v2.XMLElement) getVariableData("InvCCRMPRD_ProductUpdateAssembler_Product_processProductDefinition_InputVariable","payload","/ns4:Product/ns4:Id")).getFirstChild() ) {   
    productId = ((oracle.xml.parser.v2.XMLElement) getVariableData("InvCCRMPRD_ProductUpdateAssembler_Product_processProductDefinition_InputVariable","payload","/ns4:Product/ns4:Id")).getFirstChild().getNodeValue();   
}   
   
setCompositeInstanceTitle( getVariableData("payloadType") + " " + productId );]]>
                    </bpelx:exec>
                    <invoke name="InvCCRMPRD_ProductUpdateAssembler_Product" partnerLink="CCRMPRD_ProductUpdateAssembler" portType="ns3:CCRMPRD_ProductUpdateAssembler" operation="processProductDefinition" inputVariable="InvCCRMPRD_ProductUpdateAssembler_Product_processProductDefinition_InputVariable"/>
                </sequence>
            </case>
            <otherwise>
                <sequence name="Sequence_3">
                    <assign name="AsgToShowDecodedInput">
                        <copy>
                            <from variable="decodedInputVariable"/>
                            <to variable="decodedInputVariable"/>
                        </copy>
                    </assign>
                    <bpelx:exec name="setCustomTitleUnknownPayload" language="java" version="1.3">
                        <![CDATA[setCompositeInstanceTitle( "Fault - Unknown Payload Type");]]>
                    </bpelx:exec>
                </sequence>
            </otherwise>
        </switch>
    </sequence>
</process>
