<?xml version = '1.0' encoding = 'UTF-8'?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
* Module:      CSOM_OrderSplitter.bpel 
* Type:        BPEL Process 
* Description: Asynchronous BPEL Process that Splitts OrderRequest.
* Change History
* Version      Date         Author                  Description Of Change 
*  1.0         01/09/08    Chandrasekhar Reddy          Initial Version 
*  1.1         18/02/09    Surya Gannavarapu            Implemented flowN instead of while loop.
*  1.2         25/08/09    Surya Gannavarapu            Modified the xsl TransUserStatusExtendedToPropagateUserStatus.xsl to send 
                                                        PMP in case of User Swap Completion when ManPermReq is Y
*  1.3         25/11/09    Sreeja                       Modified the xsl TransOrderReqToUserFulfilment.xsl to add the condition for userCreation as 'AthenaCreate' in case of Athena, Added the splitting logic for 250 orderlineitems for PBI_0311.
                                                        Modified the TransExtOrderSplitterIVToCOMPASSOrderFulfilmentIV.xsl to add the conditon as 'AthenaCreate'.
*  1.4         18/11/09    Sreeja                       Added the flowN PropogateUserToSiebelAndPropogateOrderToCS inside the while loop.
*  1.5         05/04/10    Sreeja                       Modified the FTConversion conditon in TransExtOrderSplitterIVToCOMPASSOrderFulfilmentIV.xsl for defect#34663
*  1.6         22/04/10    Swathi                       Added the Scope for Correlations
*  1.7         05/05/10    Sreeja                       Added the condition in TransExtOrderSplitterIVToCOMPASSOrderFulfilmentIV.xsl
*  1.8         10/05/10    Satish P                     Modified the Transformations to send the InstallSubscriber and InstallItemnumber with the Billing request to CoreSuite as part of PBI-537  
*  1.9         23/07/10    Swapna P                     Added new conditions for "isNewUser " as part of Defect 37390
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="CSOM_OrderSplitter" targetNamespace="http://www.reuters.com/ns/2007/09/01/GCAP/EAI/CS/CSOM_OrderSplitter" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:ns4="http://www.reuters.com/ns/2007/09/01/GCAP/EAI/CS/OM/OrderManagement" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns5="http://www.reuters.com/ns/2007/09/01/GCAP/CommonOrderTypes" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:ns9="http://www.reuters.com/ns/2007/01/25/GCAP/EAI/CCRM/OM" xmlns:ns1="http://www.reuters.com/ns/2007/01/25/GCAP/EAI/OrderManagement" xmlns:ns2="http://www.reuters.com/ns/2007/09/01/GCAP/CommonMessageTypes" xmlns:orcl="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:ns10="http://www.reuters.com/NS/2007/01/25/GCAP/EAI/CS/OM/OrderManagement" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:ns13="http://www.reuters.com/NS/2007/01/25/GCAP/EAI/CS/OM/OrderManagement/UserStausExtended" xmlns:ns7="http://www.reuters.com/ns/2007/09/01/GCAP/CS/OM/Exception" xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath" xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap" xmlns:ns12="http://www.reuters.com/ns/2007/01/25/GCAP/EAI/CS/OrderRequest" xmlns:client="http://www.reuters.com/ns/2007/09/01/GCAP/EAI/CS/CSOM_OrderSplitter" xmlns:ns6="http://www.reuters.com/NS/2007/01/25/GCAP/EAI/OrderManagement/CSOM_OrderBatcher" xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions" xmlns:ns11="http://www.reuters.com/ns/2007/09/01/GCAP/EAI/CS/CSOM_OrderSplitter/correlationset" xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath" xmlns:ehdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.esb.server.headers.ESBHeaderFunctions" xmlns:ns14="http://www.reuters.com/ns/2007/01/25/GCAP/EAI/CCRM/OM/CCRMOM_ProxyPropagateOrderStatus" xmlns:ns3="http://www.reuters.com/NS/2007/01/25/GCAP/EAI/OrderManagement/CSOM_COMPASSOrderFulfilment" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:ns8="http://www.reuters.com/NS/2007/01/25/GCAP/EAI/OrderManagement/CSOM_UserFulfilment" xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:bpel2="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk">
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        PARTNERLINKS                                                      
        List of services participating in this BPEL process               
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <partnerLinks>
        <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
        <partnerLink name="client" partnerLinkType="client:CSOM_OrderSplitter" myRole="CSOM_OrderSplitterProvider" partnerRole="CSOM_OrderSplitterRequester"/>
        <partnerLink name="CSOM_OrderBatcher" partnerLinkType="ns6:CSOM_OrderBatcher" myRole="CSOM_OrderBatcherRequester" partnerRole="CSOM_OrderBatcherProvider"/>
        <partnerLink myRole="CSOM_UserFulfilmentRequester" name="CSOM_UserFulfilment" partnerRole="CSOM_UserFulfilmentProvider" partnerLinkType="ns8:CSOM_UserFulfilment"/>
        <partnerLink myRole="CCRMOM_ProxyPropagateOrderStatusRequester" name="CCRMOM_ProxyPropagateOrderStatus" partnerRole="CCRMOM_ProxyPropagateOrderStatusProvider" partnerLinkType="ns14:CCRMOM_ProxyPropagateOrderStatus"/>
    </partnerLinks>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        VARIABLES                                                        
        List of messages and XML documents used within this BPEL process 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <variables>
        <!-- Reference to the message passed as input during initiation -->
        <variable name="OrderSplitterIV" messageType="client:CSOM_OrderSplitterRequestMessage"/>
        <!-- Reference to the message that will be sent back to the requester during callback -->
        <variable name="ExtSubsciberOrderRequest" messageType="client:ExtSubscriberMessage"/>
        <variable name="runTimeFault" messageType="bpelx:RuntimeFaultMessage"/>
        <variable name="OrderRequestWithDistinctSubscribers" messageType="client:CSOM_OrderSplitterRequestMessage"/>
        <variable name="FlowNForDistinctSubscribers_Variable" type="xsd:int"/>
        <variable name="noOfOrderLinesSet" type="xsd:int"/>
        <variable name="index" type="xsd:nonNegativeInteger"/>
        <variable name="countNoOfOrders" type="xsd:nonNegativeInteger"/>
        <variable name="orderLineIndex" type="xsd:int"/>
    </variables>
    <faultHandlers>
        <catch faultName="ns7:subLanguageExecutionFault" faultVariable="runTimeFault">
            <bpelx:exec name="AsgCustomTitleOnSubLanguageExecutionFault" language="java" version="1.5">
                <![CDATA[org.w3c.dom.Node orderNumberNode = ((oracle.xml.parser.v2.XMLElement)getVariableData("OrderSplitterIV", "orderRequest", "/ns12:CSOorderRequest/ns12:orderHeader/ns12:CRMOrderNumber"));       
      
String orderNumber = orderNumberNode == null ? "" :orderNumberNode.getFirstChild().getNodeValue();      
setCompositeInstanceTitle("ORD: "+orderNumber+"; Fault");]]>
            </bpelx:exec>
        </catch>
        <catch faultName="ns7:OrderBatcherRemoteFault" faultVariable="runTimeFault">
            <bpelx:exec name="AsgCustomTitleOnOrderBatcherRemoteFault" language="java" version="1.5">
                <![CDATA[org.w3c.dom.Node orderNumberNode = ((oracle.xml.parser.v2.XMLElement) getVariableData("OrderSplitterIV", "orderRequest", "/ns12:CSOorderRequest/ns12:orderHeader/ns12:CRMOrderNumber"));      
    
String orderNumber = orderNumberNode == null ? "" :orderNumberNode.getFirstChild().getNodeValue();    
setCompositeInstanceTitle("ORD: "+orderNumber+"; Fault");]]>
            </bpelx:exec>
        </catch>
        <catch faultName="bpelx:remoteFault" faultVariable="runTimeFault">
            <bpelx:exec name="AsgCustomTitleOnRemoteFault" language="java" version="1.5">
                <![CDATA[org.w3c.dom.Node orderNumberNode = ((oracle.xml.parser.v2.XMLElement)getVariableData("OrderSplitterIV", "orderRequest", "/ns12:CSOorderRequest/ns12:orderHeader/ns12:CRMOrderNumber"));      
    
String orderNumber = orderNumberNode == null ? "" :orderNumberNode.getFirstChild().getNodeValue();    
setCompositeInstanceTitle("ORD: "+orderNumber+"; Fault");]]>
            </bpelx:exec>
        </catch>
        <catch faultName="bpelx:bindingFault" faultVariable="runTimeFault">
            <bpelx:exec name="AsgCustomTitleOnSelectionFailureFault" language="java" version="1.5">
                <![CDATA[org.w3c.dom.Node orderNumberNode = ((oracle.xml.parser.v2.XMLElement)getVariableData("OrderSplitterIV", "orderRequest", "/ns12:CSOorderRequest/ns12:orderHeader/ns12:CRMOrderNumber"));      
    
String orderNumber = orderNumberNode == null ? "" :orderNumberNode.getFirstChild().getNodeValue();    
setCompositeInstanceTitle("ORD: "+orderNumber+"; Fault");]]>
            </bpelx:exec>
        </catch>
        <catch faultName="bpws:selectionFailure" faultVariable="runTimeFault">
            <bpelx:exec name="AsgCustomTitleOnBindingFault" language="java" version="1.5">
                <![CDATA[org.w3c.dom.Node orderNumberNode = ((oracle.xml.parser.v2.XMLElement)getVariableData("OrderSplitterIV", "orderRequest", "/ns12:CSOorderRequest/ns12:orderHeader/ns12:CRMOrderNumber"));      
    
String orderNumber = orderNumberNode == null ? "" :orderNumberNode.getFirstChild().getNodeValue();    
setCompositeInstanceTitle("ORD: "+orderNumber+"; Fault");]]>
            </bpelx:exec>
        </catch>
        <catch faultName="bpelx:invalidVariables" faultVariable="runTimeFault">
            <bpelx:exec name="AsgCustomTitleOnInvalidVariablesFault" language="java" version="1.5">
                <![CDATA[org.w3c.dom.Node orderNumberNode = ((oracle.xml.parser.v2.XMLElement)getVariableData("OrderSplitterIV", "orderRequest", "/ns12:CSOorderRequest/ns12:orderHeader/ns12:CRMOrderNumber"));      
    
String orderNumber = orderNumberNode == null ? "" :orderNumberNode.getFirstChild().getNodeValue();    
setCompositeInstanceTitle("ORD: "+orderNumber+"; Fault");]]>
            </bpelx:exec>
        </catch>
        <catchAll>
            <bpelx:exec name="AsgCustomTitleOnCatchAll" language="java" version="1.5">
                <![CDATA[org.w3c.dom.Node orderNumberNode = ((oracle.xml.parser.v2.XMLElement)getVariableData("OrderSplitterIV", "orderRequest", "/ns1:orderRequest/ns1:orderHeader/ns1:CRMOrderNumber"));      
    
String orderNumber = orderNumberNode == null ? "" :orderNumberNode.getFirstChild().getNodeValue();    
setCompositeInstanceTitle("ORD: "+orderNumber+"; Fault");]]>
            </bpelx:exec>
        </catchAll>
    </faultHandlers>
    <!-- 
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       ORCHESTRATION LOGIC                                               
       Set of activities coordinating the flow of messages across the    
       services integrated within this business process                  
      ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    -->
    <sequence name="main">
        <!-- Receive input from requestor. (Note: This maps to operation defined in CSOM_OrderSplitter.wsdl) -->
        <receive name="receiveInput" partnerLink="client" portType="client:CSOM_OrderSplitter" operation="splitOrder" variable="OrderSplitterIV" createInstance="yes"/>
        <!-- 
          Asynchronous callback to the requester. (Note: the callback location and correlation id is transparently handled using WS-addressing.)
        -->
        <bpelx:exec name="AsgCustomTitle" language="java" version="1.5">
            <![CDATA[String orderNumber = ((oracle.xml.parser.v2.XMLElement)                             
                        getVariableData("OrderSplitterIV", "orderRequest", "/ns12:CSOrderRequest/ns12:orderHeader/ns12:CRMOrderNumber")).getFirstChild().getNodeValue();                                
                    
                                            
 String Title=(orderNumber!=null ? ("ORD: "+orderNumber) : ".;");             
 setCompositeInstanceTitle(Title);]]>
        </bpelx:exec>
        <assign name="AsgInitVariables">
            <copy>
                <from expression="ceiling(count(bpws:getVariableData('OrderSplitterIV','orderRequest','/ns12:CSOrderRequest/ns12:orderLineItem')) div 250)"/>
                <to variable="noOfOrderLinesSet"/>
            </copy>
            <copy>
                <from expression="count(bpws:getVariableData('OrderSplitterIV','orderRequest','/ns12:CSOrderRequest/ns12:orderLineItem'))"/>
                <to variable="countNoOfOrders"/>
            </copy>
            <copy>
                <from expression="1"/>
                <to variable="index"/>
            </copy>
            <copy>
                <from expression="0"/>
                <to variable="orderLineIndex"/>
            </copy>
        </assign>
        <assign name="TransOrderRequestToExtSubscriberOrderRequest">
            <bpelx:annotation>
                <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
                <from expression="ora:processXSLT('TransOrderRequestToExtSubscriberOrderRequest.xsl',bpws:getVariableData('OrderSplitterIV','orderRequest'))"/>
                <to variable="ExtSubsciberOrderRequest" part="extSubMsg"/>
            </copy>
        </assign>
        <assign name="TransSubscriberToApplyDVM">
            <bpelx:annotation>
                <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
                <from expression="ora:processXSLT('TransSubscriberToApplyDVM.xsl',bpws:getVariableData('ExtSubsciberOrderRequest','extSubMsg'))"/>
                <to variable="ExtSubsciberOrderRequest" part="extSubMsg"/>
            </copy>
        </assign>
        <assign name="TransExtSubOrderRequestToOrderRequest">
            <bpelx:annotation>
                <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
                <from expression="ora:processXSLT('TransExtSubOrderRequestToOrderRequest.xsl',bpws:getVariableData('ExtSubsciberOrderRequest','extSubMsg'))"/>
                <to variable="OrderSplitterIV" part="orderRequest"/>
            </copy>
        </assign>
        <assign name="TransSortSubscribers">
            <bpelx:annotation>
                <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
                <from expression="ora:processXSLT('TransSortSubscribers.xsl',bpws:getVariableData('OrderSplitterIV','orderRequest'))"/>
                <to variable="OrderSplitterIV" part="orderRequest"/>
            </copy>
        </assign>
        <assign name="TransFindDistinctSubscribers">
            <bpelx:annotation>
                <bpelx:pattern>transformation</bpelx:pattern>
            </bpelx:annotation>
            <copy>
                <from expression="ora:processXSLT('TransFindDistinctSubscribers.xsl',bpws:getVariableData('OrderSplitterIV','orderRequest'))"/>
                <to variable="OrderRequestWithDistinctSubscribers" part="orderRequest"/>
            </copy>
        </assign>
        <!--assign name="Assign_lnitializeCounter">
            <copy>
                <from expression="1"/>
                <to variable="FlowNForDistinctSubscribers_Variable"/>
            </copy>
        </assign>
        <while name="While_2"
               condition="bpws:getVariableData('FlowNForDistinctSubscribers_Variable')&lt;= count(bpws:getVariableData('OrderRequestWithDistinctSubscribers','orderRequest','/ns12:CSOrderRequest/ns12:orderLineItem'))"-->
        <bpelx:flowN name="FlowNForDistinctSubscribers" N="count(bpws:getVariableData('OrderRequestWithDistinctSubscribers','orderRequest','/ns12:CSOrderRequest/ns12:orderLineItem'))" indexVariable="FlowNForDistinctSubscribers_Variable">
            <scope name="ScpOrderRequestForASuscriber">
                <variables>
                    <variable name="OrderSplitterIVlocal" messageType="client:CSOM_OrderSplitterRequestMessage"/>                
                    <variable name="SuccessResponseCode" type="xsd:string"/>
                    <variable name="OrderRequestWithOneSubscriber" messageType="client:CSOM_OrderSplitterRequestMessage"/>
                    <variable name="ExtOrderSplitterIV" messageType="client:CSOM_OrderSplitterRequestMessage"/>
                    <variable name="UserFulfilmentIV" messageType="ns8:CSOM_UserFulfilmentRequestMessage"/>
                    <variable name="UserStatusOV" messageType="client:CSUserStatusMessage"/>
                    <variable name="isGoodToGo" type="xsd:string"/>
                    <variable name="CSUserStatusExtended" messageType="client:CSUserStatusExtended"/>
                    <variable name="OrderBatcherIV" messageType="ns6:CSOM_OrderBatcherRequestMessage"/>
                    <variable name="PropagateUserStatusOnUserCreationFailure" messageType="ns14:CCRMOM_ProxyPropagateOrderStatusRequestMessage"/>
                    <variable name="PropagateUserStatusIV" messageType="ns14:CCRMOM_ProxyPropagateOrderStatusRequestMessage"/>
                    <variable name="SCP_ExtSubsciberOrderRequest" messageType="client:ExtSubscriberMessage"/>
                   
                </variables>
                <sequence>
                    <assign name="Assign_OrderRequestToLocalVar">
                        <copy>
                            <from variable="OrderSplitterIV" part="orderRequest"
                                  query="/ns12:CSOrderRequest"/>
                            <to variable="OrderSplitterIVlocal" part="orderRequest"
                                query="/ns12:CSOrderRequest"/>
                        </copy>
                    </assign>
                    <sequence name="SeqforaDistinctSubscriber">
                        <assign name="AsgSubscriberToMsgId">
                            <copy>
                                <from variable="OrderRequestWithDistinctSubscribers"
                                      part="orderRequest"
                                      query="/ns12:CSOrderRequest/ns12:orderLineItem[bpws:getVariableData('FlowNForDistinctSubscribers_Variable')]/ns12:subscriber"/>
                                <to variable="OrderSplitterIVlocal"
                                    part="orderRequest"
                                    query="/ns12:CSOrderRequest/ns12:eaiHeader/ns2:messageId"/>
                            </copy>
                        </assign>
                        <assign name="TransOrderSplitterIVtoExtOrderSplitterIV">
                            <bpelx:annotation>
                                <bpelx:pattern>transformation</bpelx:pattern>
                            </bpelx:annotation>
                            <copy>
                                <from expression="ora:processXSLT('TransOrderSplitterIVtoExtOrderSplitterIV.xsl',bpws:getVariableData('OrderSplitterIVlocal','orderRequest'))"/>
                                <to variable="ExtOrderSplitterIV"
                                    part="orderRequest"/>
                            </copy>
                        </assign>
                        <assign name="TransOrderSplitterIVToOrderRequestWithOneSubscribers">
                            <bpelx:annotation>
                                <bpelx:pattern>transformation</bpelx:pattern>
                            </bpelx:annotation>
                            <copy>
                                <from expression="ora:processXSLT('TransOrderSplitterIVToOrderRequestWithOneSubscribers.xsl',bpws:getVariableData('ExtOrderSplitterIV','orderRequest'))"/>
                                <to variable="OrderRequestWithOneSubscriber"
                                    part="orderRequest"/>
                            </copy>
                        </assign>
                        <assign name="InitScpVariables">
                            <copy>
                                <from expression="dvm:lookupValue('oramds:/apps/EAIMetaData/dvm/CRMAppReference.dvm','Reference','SuccessCode','Value', '0')"/>
                                <to variable="SuccessResponseCode"/>
                            </copy>
                            <copy>
                                <from variable="SuccessResponseCode"/>
                                <to variable="isGoodToGo"/>
                            </copy>
                            <copy>
                                <from expression="ora:generateGUID()"/>
                                <to variable="OrderRequestWithOneSubscriber"
                                    part="orderRequest"
                                    query="/ns12:CSOrderRequest/ns12:eaiHeader/ns2:tracingId"/>
                            </copy>
                        </assign>
                        <assign name="TransOrderReqToUserFulfilment">
                            <bpelx:annotation>
                                <bpelx:pattern>transformation</bpelx:pattern>
                            </bpelx:annotation>
                            <copy>
                                <from expression="ora:processXSLT('TransOrderReqToUserFulfilment.xsl',bpws:getVariableData('OrderRequestWithOneSubscriber','orderRequest'))"/>
                                <to variable="UserFulfilmentIV"
                                    part="userRequest"/>
                            </copy>
                        </assign>
                        <scope name="userFulfilmentScope">
                            <switch name="CheckNoOfUserLines">
                                <case condition="count(bpws:getVariableData('UserFulfilmentIV','userRequest','/ns4:compassUser/ns4:userLineItem'))>0 ">
                                    <sequence name="SeqUserCreation">
                                        <while name="While_1"
                                               condition="bpws:getVariableData('noOfOrderLinesSet')>0">
                                            <sequence name="SeqSplitUsers">
                                                <scope name="userSpliterScope">
                                                    <correlationSets>
                                                        <correlationSet name="CorrelationSetUser"
                                                                        properties="ns11:CorrProp"/>
                                                    </correlationSets>
                                                    <sequence name="Sequence_2">
                                                        <assign name="TransOrderReqToSplitUserOrder">
                                                            <bpelx:annotation>
                                                                <bpelx:pattern>transformation</bpelx:pattern>
                                                            </bpelx:annotation>
                                                            <copy>
                                                                <from expression="ora:doXSLTransformForDoc('TransOrderReqToSplitUserOrderReq.xsl', $OrderRequestWithOneSubscriber.orderRequest)"/>
                                                                <to variable="SCP_ExtSubsciberOrderRequest"
                                                                    part="extSubMsg"/>
                                                            </copy>
                                                        </assign>
                                                        <assign name="AsgOrderLineSetIndex">
                                                            <copy>
                                                                <from variable="orderLineIndex"/>
                                                                <to variable="SCP_ExtSubsciberOrderRequest"
                                                                    part="extSubMsg"
                                                                    query="/ns1:extSubcriberOrderRequest/ns1:index"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="ora:generateGUID()"/>
                                                                <to variable="OrderRequestWithOneSubscriber"
                                                                    part="orderRequest"
                                                                    query="/ns12:CSOrderRequest/ns12:eaiHeader/ns2:tracingId"/>
                                                            </copy>
                                                        </assign>
                                                        <assign name="TransSplitOrderReqToUserFulfilment">
                                                            <bpelx:annotation>
                                                                <bpelx:pattern>transformation</bpelx:pattern>
                                                            </bpelx:annotation>
                                                            <copy>
                                                                <from expression="ora:processXSLT('TransSplitOrderReqToUserFulfilment.xsl',bpws:getVariableData('SCP_ExtSubsciberOrderRequest','extSubMsg'))"/>
                                                                <to variable="UserFulfilmentIV"
                                                                    part="userRequest"/>
                                                            </copy>
                                                        </assign>
                                                        <invoke name="InvUserFulfilment"
                                                                partnerLink="CSOM_UserFulfilment"
                                                                portType="ns8:CSOM_UserFulfilment"
                                                                operation="transformUser"
                                                                inputVariable="UserFulfilmentIV">
                                                            <correlations>
                                                                <correlation initiate="yes"
                                                                             set="CorrelationSetUser"
                                                                             pattern="out"/>
                                                            </correlations>
                                                        </invoke>
                                                        <assign name="updateIndexVariables">
                                                            <copy>
                                                                <from expression="bpws:getVariableData('noOfOrderLinesSet')-1"/>
                                                                <to variable="noOfOrderLinesSet"/>
                                                            </copy>
                                                            <copy>
                                                                <from expression="bpws:getVariableData('orderLineIndex')+1"/>
                                                                <to variable="orderLineIndex"/>
                                                            </copy>
                                                        </assign>
                                                        <receive name="RcvUserStatus"
                                                                 createInstance="no"
                                                                 partnerLink="client"
                                                                 portType="client:CSOM_OrderSplitter"
                                                                 operation="updateUserStatus"
                                                                 variable="UserStatusOV">
                                                            <correlations>
                                                                <correlation initiate="no"
                                                                             set="CorrelationSetUser"/>
                                                            </correlations>
                                                        </receive>
                                                    </sequence>
                                                </scope>
                                                <flow name="PropogateUserToSiebelAndPropogateOrderToCS">
                                                    <sequence name="SeqPropagateUserStatusToSiebel">
                                                        <assign name="TransUserStatusToUserStatusExtended">
                                                            <bpelx:annotation>
                                                                <bpelx:pattern>transformation</bpelx:pattern>
                                                            </bpelx:annotation>
                                                            <copy>
                                                                <from expression="ora:processXSLT('TransUserStausToUserStatusExtended.xsl',bpws:getVariableData('UserStatusOV','userStatus'))"/>
                                                                <to variable="CSUserStatusExtended"
                                                                    part="CSUserStatusExtended"/>
                                                            </copy>
                                                        </assign>
                                                        <assign name="TransUserStatusExtendedToPropagateUserStatus">
                                                            <bpelx:annotation>
                                                                <bpelx:pattern>transformation</bpelx:pattern>
                                                            </bpelx:annotation>
                                                            <copy>
                                                                <from expression="ora:processXSLT('TransUserStatusExtendedToPropogateUserStatus.xsl',bpws:getVariableData('CSUserStatusExtended','CSUserStatusExtended'))"/>
                                                                <to part="orderStatus"
                                                                    variable="PropagateUserStatusOnUserCreationFailure"/>
                                                            </copy>
                                                        </assign>
                                                        <invoke name="InvProxyPropagateOrderStatusOnUserCreationFailure"
                                                                partnerLink="CCRMOM_ProxyPropagateOrderStatus"
                                                                portType="ns14:CCRMOM_ProxyPropagateOrderStatus"
                                                                operation="initiate"
                                                                inputVariable="PropagateUserStatusOnUserCreationFailure"/>
                                                    </sequence>
                                                    <sequence name="SeqGoodToGo">
                                                        <switch name="CheckUserStatus">
                                                            <case condition="bpws:getVariableData('UserStatusOV','userStatus','/ns10:CSuserStatus/ns10:userHeader/ns10:response') = '0'">
                                                                <assign name="AsgGoodToGo">
                                                                    <copy>
                                                                        <from variable="SuccessResponseCode"/>
                                                                        <to variable="isGoodToGo"/>
                                                                    </copy>
                                                                </assign>
                                                            </case>
                                                            <otherwise>
                                                                <sequence name="SeqPropagateErrorOnUserCreationFailuresForNonUserReqLines">
                                                                    <assign name="AsgNotGoodToGo">
                                                                        <copy>
                                                                            <from expression='"1"'/>
                                                                            <to variable="isGoodToGo"/>
                                                                        </copy>
                                                                    </assign>
                                                                    <assign name="TransErrorOnUserCreationFailure">
                                                                        <bpelx:annotation>
                                                                            <bpelx:pattern>transformation</bpelx:pattern>
                                                                        </bpelx:annotation>
                                                                        <copy>
                                                                            <from expression="ora:processXSLT('TransErrorOnUserCreationFailure.xsl',bpws:getVariableData('OrderRequestWithOneSubscriber','orderRequest'))"/>
                                                                            <to part="orderStatus"
                                                                                variable="PropagateUserStatusIV"/>
                                                                        </copy>
                                                                    </assign>
                                                                    <switch name="CheckNoOfOrderLines">
                                                                        <case condition="count(bpws:getVariableData('PropagateUserStatusIV','orderStatus','/ns1:orderStatus/ns1:orderLineItem'))>0">
                                                                            <invoke name="InvPropagateUserStatusOnUserCreationFailure"
                                                                                    partnerLink="CCRMOM_ProxyPropagateOrderStatus"
                                                                                    portType="ns14:CCRMOM_ProxyPropagateOrderStatus"
                                                                                    operation="initiate"
                                                                                    inputVariable="PropagateUserStatusIV"/>
                                                                        </case>
                                                                        <otherwise>
                                                                            <empty name="DoNothing"/>
                                                                        </otherwise>
                                                                    </switch>
                                                                </sequence>
                                                            </otherwise>
                                                        </switch>
                                                    </sequence>
                                                </flow>
                                            </sequence>
                                        </while>
                                    </sequence>
                                </case>
                                <otherwise>
                                    <sequence name="SeqNoUserLines">
                                        <empty/>
                                    </sequence>
                                </otherwise>
                            </switch>
                        </scope>
                        <scope name="ScpCheckUserCreationResponse">
                            <sequence name="SeqCheckUserCreationResponse">
                                <switch name="CheckUserResponse">
                                    <case condition="bpws:getVariableData('isGoodToGo')=bpws:getVariableData('SuccessResponseCode')">
                                        <sequence name="SeqUserCreationSuccesful">
                                            <scope name="ScpOrderBatcher">
                                                <faultHandlers>
                                                    <catch faultName="bpelx:subLanguageExecutionFault"
                                                           faultVariable="runTimeFault">
                                                        <sequence name="SeqLookUpXRefFailureOnSubLanguageExecutionFault">
                                                            <assign name="TransOrderRequestToPropagateOrderStatusOnSubLanguageExceptionFault">
                                                                <bpelx:annotation>
                                                                    <bpelx:pattern>transformation</bpelx:pattern>
                                                                </bpelx:annotation>
                                                                <copy>
                                                                    <from expression="ora:processXSLT('TransOrderRequestToPropagateOrderStatusOnSubLanguageExceptionFault.xsl',bpws:getVariableData('OrderRequestWithOneSubscriber','orderRequest'))"/>
                                                                    <to variable="PropagateUserStatusIV"
                                                                        part="orderStatus"/>
                                                                </copy>
                                                            </assign>
                                                            <invoke name="InvPropagateOrderStatusOnSubLanguageExecutionFault"
                                                                    partnerLink="CCRMOM_ProxyPropagateOrderStatus"
                                                                    portType="ns14:CCRMOM_ProxyPropagateOrderStatus"
                                                                    operation="initiate"
                                                                    inputVariable="PropagateUserStatusIV"/>
                                                        </sequence>
                                                    </catch>
                                                </faultHandlers>
                                                <sequence name="SeqOrderBatcher">
                                                    <assign name="TransExtOrderSplitterIVToCOMPASSOrderFulfilmentIV">
                                                        <bpelx:annotation>
                                                            <bpelx:pattern>transformation</bpelx:pattern>
                                                        </bpelx:annotation>
                                                        <copy>
                                                            <from expression="ora:doXSLTransformForDoc('TransExtOrderSplitterIVToCOMPASSOrderFulfilmentIV.xsl', $OrderRequestWithOneSubscriber.orderRequest)"/>
                                                            <to variable="OrderBatcherIV"
                                                                part="payload"/>
                                                        </copy>
                                                    </assign>
                                                    <invoke name="InvOrderBatcher"
                                                            partnerLink="CSOM_OrderBatcher"
                                                            portType="ns6:CSOM_OrderBatcher"
                                                            operation="batchOrderRequest"
                                                            inputVariable="OrderBatcherIV"/>
                                                </sequence>
                                            </scope>
                                        </sequence>
                                    </case>
                                    <otherwise>
                                        <empty name="DoNothing"/>
                                    </otherwise>
                                </switch>
                            </sequence>
                        </scope>
                        <!--assign name="Assign_IncrementCounter">
                            <copy>
                                <from expression="bpws:getVariableData('FlowNForDistinctSubscribers_Variable')+1"/>
                                <to variable="FlowNForDistinctSubscribers_Variable"/>
                            </copy>
                        </assign-->
                    </sequence>
                </sequence>
            </scope>
        </bpelx:flowN>
        <!--/while-->
    </sequence>
</process>
